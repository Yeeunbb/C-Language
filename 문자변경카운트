/*
 * homework.cpp
 *
 *  Created on: 2018. 9. 28.
 *      Author: ykoou
 */

#include <iostream>
#include <cstring>

using namespace std;

struct stringStructure //구조체 선언
{
	char* str; //str이라는 문자형 포인터
	int count; //입력받은 문자가 변하는 횟수를 저장하는 변수 count
};

struct stringStructure* createString(int stringLength);
void structuredStrClear(struct stringStructure* str, int length);

int structuredStrLen(struct stringStructure* str);
void structuredStrCat(struct stringStructure* str1, struct stringStructure* str2);
void structuredStrCat(struct stringStructure* str1, const char* str2);
void structuredStrCpy(struct stringStructure* str1, struct stringStructure* str2);
void structuredStrCpy(struct stringStructure* str1, const char* str2);
int structuredStrCmp(struct stringStructure* str1, struct stringStructure* str2);

void printStructuredString(struct stringStructure* str);
//문자열을 입력한 후 복사, 붙여넣기, 비교등의 기능을 가진 프로그램
int main()
{
	struct stringStructure *str1, *str2; ///stringStructure이라는 구조체 str1,str2 선언

	str1 = createString(1024);
	structuredStrClear(str1, 1024); //str1 1번째변경

	cout << "Enter something string: ";
	cin >> str1 -> str; //str1구조체 내부에 있는 문자형 변수 str에 저장

	str2 = createString(1024);
	structuredStrClear(str2, 1024); //str2 1번째 변경

	structuredStrCpy(str2, str1); //str2 2번째 변경

	if(structuredStrCmp(str1, str2) == 0) //str1과 str2 문자열 비교
	{
		cout << "Same String" << endl;
	}

	else
	{
		cout << "Different String" << endl;
	}

	structuredStrCat(str2, " Hello"); //str2구조체에 Hello라는 문자열을 이어붙임, str2 3번째 변경
	structuredStrCat(str2, str1); //str2 4번째 변경

	structuredStrClear(str1, 1024); //str1 2번째 변경

	structuredStrCpy(str1, "Computer Programming"); //str1구조체에 Computer Programming이라는 문자열 복사, str1 3번째 변경

	if(structuredStrCmp(str1, str2) == 0) //문자열을 비교하여 같은지 다른지 비교
	{
		cout << "Same String" << endl;
	}

	else
	{
		cout << "Different String" << endl;
	}

	printStructuredString(str1); //문자열 출력
	printStructuredString(str2);

	delete[] str1->str; //동적할당 받았던 구조체 내부 문자열 메모리 반납
	delete str1; //동적할당 받은 구조체 메모리 반납
	delete[] str2->str;
	delete str2;

	return 0;
}

struct stringStructure* createString(int stringLength) //문자열 구조체 생성 함수
{
	struct stringStructure* ssstring; //구조체 포인터 선언
	ssstring = new struct stringStructure; //선언한 구조체 동적할당
	ssstring ->str = new char [stringLength];//구조체 내의 str을 stringLength크기 만큼 동적할당
	ssstring->count = 0;//구조체 내의 count초기화
	return ssstring;
}

void structuredStrClear(struct stringStructure* str, int length) //구조체 내부의 문자열 초기화 함수
{
	str->count++;
	memset(str->str, 0, length);
}

int structuredStrLen(struct stringStructure* str) //문자열 길이 계산 함수
{
	int length;
	length = strlen(str->str);
	return length;
}

void structuredStrCat(struct stringStructure* str1, struct stringStructure* str2) //구조체 문자열 끼리 이어붙이는 함수
{
	strcat(str1->str, str2->str);
	str1 -> count++;
}

void structuredStrCat(struct stringStructure* str1, const char* str2) //구조체 문자열과 문자열을  이어붙이는 함수
{
	strcat(str1->str, str2);
	str1 -> count++;
}

void structuredStrCpy(struct stringStructure* str1, struct stringStructure* str2) //구조체 내부의 문자열을 다른 구조체 문자열에  복사하는 함수
{
	strcpy(str1->str, str2->str);
	str1 -> count++;
}

void structuredStrCpy(struct stringStructure* str1, const char* str2) //문자열을 구조체 문자열에 복사하는 함수
{
	strcpy(str1->str, str2);
	str1 -> count++;
}

int structuredStrCmp(struct stringStructure* str1, struct stringStructure* str2) //구조체 문자열 끼리 비교하는 함수
{
	return strcmp(str1->str, str2->str);
}

void printStructuredString(struct stringStructure* str) // 문자열의 내용 출력 및 변경 횟수 출력함수
{
	cout << "String: " << str->str <<endl; //구조체 내부 str에 저장된 문자열 출력
	cout << "Number of Modify: " << str->count << endl; //문자열이 바뀌었던 횟수 출력
}
